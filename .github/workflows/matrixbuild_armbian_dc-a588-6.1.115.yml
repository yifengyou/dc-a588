#==========================================================================
# Description: MatribBuild Image (kver 6.1.115)
#==========================================================================

name: MatribBuild Image (kver 6.1.115)

on:
  repository_dispatch:
  workflow_dispatch:


env:
  TZ: America/New_York
  ROOTFS_SCRIPT: compile-kernel/tools/script/armbian_rootfs.sh

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        set_release: [ bullseye, bookworm, jammy, noble ]
        set_desktop: [ cli, gnome, xfce ]
        exclude:
          - set_release: bullseye
            set_desktop: gnome
          - set_release: bullseye
            set_desktop: xfce

    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialization environment
        id: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q) 2>/dev/null
          [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
          sudo swapoff -a
          sudo rm -f /swapfile /mnt/swapfile
          sudo -E apt-get -y update
          sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          sudo -E apt-get -y install python2 python2-dev python-is-python3 squashfs-tools rar $(curl -fsSL https://tinyurl.com/ubuntu2204-build-armbian)
          sudo -E systemctl daemon-reload
          #sudo -E apt-get -y full-upgrade
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          sudo rm -rf ~/{.cargo,.dotnet,.rustup}
          sudo timedatectl set-timezone "${TZ}"
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Create build directory
        run: |
          sudo mkdir -p /builder
          sudo chown -R runner.runner /builder
          df -Th

      - name: Download DC-A588 Uboot and Kernel code
        id: down_d3588
        working-directory: /builder/
        if: ${{ steps.init.outputs.status }} == 'success' && !cancelled()
        run: |
          df -hT ${PWD}
          git clone --recursive --single-branch --branch=master https://github.com/yifengyou/dc-a588.git dc-a588.git
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile DC-A588 Uboot and Kernel code
        id: compile_d3588
        working-directory: /builder/dc-a588.git
        if: ${{ steps.down_d3588.outputs.status }} == 'success' && !cancelled()
        run: |
          ls -alh
          du -sh *
          ./build.sh
          ls -alh rockdev
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Download armbian source code
        id: down_armbian
        working-directory: /builder/
        if: ${{ steps.compile_d3588.outputs.status }} == 'success' && !cancelled()
        run: |
          set -x
          git clone -q --single-branch \
            --depth=1 \
            --branch=main \
            https://github.com/armbian/build.git armbian.git
          ls -alh armbian.git
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Compile Armbian [ ${{ matrix.set_release }} ] [ ${{ matrix.set_desktop }} ]
        id: compile_armbian
        working-directory: /builder/armbian.git
        if: ${{ steps.down_armbian.outputs.status }} == 'success' && !cancelled()
        run: |
          if [ "${{ matrix.set_desktop }}" == "cli" ] ; then
            BUILD_DESKTOP="BUILD_DESKTOP=no"
          else
            BUILD_DESKTOP=" \
                BUILD_DESKTOP=yes \
                DESKTOP_APPGROUPS_SELECTED=remote_desktop \
                DESKTOP_ENVIRONMENT=${{ matrix.set_desktop }} \
                DESKTOP_ENVIRONMENT_CONFIG_NAME=config_base"
          fi
          # BRANCH=edge    : newest kernel such as 6.10
          # BRANCH=current : stable kernel such as 6.6
          # BRANCH=legacy  : vendor kernel rockchip 5.10
          ./compile.sh RELEASE=${{ matrix.set_release }} \
                       BOARD=nanopct6 \
                       BRANCH=current\
                       BUILD_MINIMAL=no \
                       BUILD_ONLY=default \
                       HOST=armbian \
                       ${BUILD_DESKTOP} \
                       EXPERT=yes \
                       KERNEL_CONFIGURE=no \
                       COMPRESS_OUTPUTIMAGE="sha,img,xz" \
                       VENDOR="Armbian" \
                       SHARE_LOG=yes
          ls -alh /builder/armbian.git/output/images/
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Generate rootfs image
        id: generate_rootfs
        working-directory: /builder/
        if: ${{ steps.compile_armbian.outputs.status }} == 'success' && !cancelled()
        run: |
          # create directory
          mkdir -p /builder/dc-a588.git/tools/RKDevTool/rockdev/image/
          mkdir -p /builder/dc-a588.git/rockdev
          mkdir -p /builder/dc-a588.git/release

          # archive modules
          cd /builder/dc-a588.git/rockdev && tar -zcvf modules.tar.gz modules

          # generate rootfs.img in /builder/armbian.git/output/images/
          chmod +x /builder/dc-a588.git/extract-rootfs-from-armbian.sh
          /builder/dc-a588.git/extract-rootfs-from-armbian.sh /builder/armbian.git/output/images/
          mv /builder/armbian.git/output/images/rootfs.img /builder/dc-a588.git/rockdev/

          # hack rootfs, must start with sudo
          sudo mount /builder/dc-a588.git/rockdev/rootfs.img /mnt
          sudo bash -c 'echo "tmpfs /tmp tmpfs defaults,nosuid 0 0" >> /mnt/etc/fstab'
          # add vendor
          sudo cp -a /builder/dc-a588.git/vendor /mnt/
          # add rc.local
          sudo bash -c 'cat /mnt/vendor/rc.local > /mnt/etc/rc.local'
          sudo chmod +x /mnt/etc/rc.local
          # add modules
          sudo cp -a /builder/dc-a588.git/rockdev/modules /mnt/vendor/
          sync
          sudo umount /mnt

          # generate all in one updateable update.img
          chmod +x /builder/dc-a588.git/tools/afptool
          chmod +x /builder/dc-a588.git/tools/rkImageMaker
          cd /builder/dc-a588.git/rockdev && \
              /builder/dc-a588.git/tools/afptool -pack . temp.img && \
              /builder/dc-a588.git/tools/rkImageMaker -RK3588 MiniLoaderAll.bin temp.img \
              /builder/dc-a588.git/tools/RKDevTool/rockdev/image/update.img -os_type:androidos

          # generate update.img
          cd /builder/dc-a588.git/tools/ && \
            mksquashfs RKDevTool  /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_update.img.squashfs && \
            rar a /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_update.img.rar RKDevTool
          sha256sum /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_update.img.squashfs > \
            /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_update.img.squashfs.sha256
          sha256sum /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_update.img.rar > \
            /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_update.img.rar.sha256

          # generate rockdev image
          rm -f /builder/dc-a588.git/tools/RKDevTool/rockdev/image/update.img
          mv /builder/dc-a588.git/rockdev/boot.img             /builder/dc-a588.git/tools/RKDevTool/rockdev/image/
          mv /builder/dc-a588.git/rockdev/MiniLoaderAll.bin    /builder/dc-a588.git/tools/RKDevTool/rockdev/image/
          mv /builder/dc-a588.git/rockdev/modules.tar.gz       /builder/dc-a588.git/tools/RKDevTool/rockdev/image/
          mv /builder/dc-a588.git/rockdev/parameter.txt        /builder/dc-a588.git/tools/RKDevTool/rockdev/image/
          mv /builder/dc-a588.git/rockdev/rootfs.img           /builder/dc-a588.git/tools/RKDevTool/rockdev/image/
          mv /builder/dc-a588.git/rockdev/uboot.img            /builder/dc-a588.git/tools/RKDevTool/rockdev/image/
          mv /builder/dc-a588.git/rockdev/misc.img             /builder/dc-a588.git/tools/RKDevTool/rockdev/image/
          mv /builder/dc-a588.git/rockdev/package-file         /builder/dc-a588.git/tools/RKDevTool/rockdev/image/
          mv /builder/dc-a588.git/rockdev/recovery.img         /builder/dc-a588.git/tools/RKDevTool/rockdev/image/
          mv /builder/dc-a588.git/rockdev/oem.img              /builder/dc-a588.git/tools/RKDevTool/rockdev/image/
          cd /builder/dc-a588.git/tools/ && \
            mksquashfs  RKDevTool  /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rockdev.squashfs && \
            rar a /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rockdev.rar RKDevTool
          sha256sum /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rockdev.squashfs > \
            /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rockdev.squashfs.sha256
          sha256sum /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rockdev.rar > \
            /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rockdev.rar.sha256

          # release Armbian files
          # mv /builder/armbian.git/output/images/Armbian* /builder/dc-a588.git/release

          # generate rootfs.img
          cd /builder/dc-a588.git/tools/RKDevTool/rockdev/image/ && \
            mksquashfs rootfs.img  /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rootfs.img.squashfs && \
            rar a /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rootfs.img.rar rootfs.img
          sha256sum /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rootfs.img.squashfs > \
            /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rootfs.img.squashfs.sha256
          sha256sum /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rootfs.img.rar > \
            /builder/dc-a588.git/release/Armbian_DC-A588_${{ matrix.set_release }}_${{ matrix.set_desktop }}_rootfs.img.rar.sha256

          # show all files
          ls -alh /builder/dc-a588.git/release/

          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload DC-A588 image to Release
        uses: ncipollo/release-action@main
        if: ${{ steps.generate_rootfs.outputs.status }} == 'success' && !cancelled()
        with:
          tag: Armbian_DC-A588
          artifacts: /builder/dc-a588.git/release/*
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ### 定昌DC-A588开发板Armbian构建输出(Armbian Image for DC-A588 information)
            - 默认用户名(Default username): root
            - 默认密码(Default password): 123

            ### rockdev构建输出(rockdev.squashfs/rockdev.rar)

            带windows更新工具RKDevTool，开箱即用。包含以下目录结构，windows下载后解压，执行RKDevTool.exe即可。

            ```
            RKDevTool/
            ├── bin
            │         ├── adb.exe
            │         ├── AdbWinApi.dll
            │         ├── AdbWinUsbApi.dll
            │         ├── AFPTool.exe
            │         └── RKImageMaker.exe
            ├── config.cfg
            ├── config.ini
            ├── Language
            │         ├── Chinese.ini
            │         └── English.ini
            ├── RKDevTool.exe
            └── rockdev
                └── image
                    ├── boot.img
                    ├── MiniLoaderAll.bin
                    ├── misc.img
                    ├── modules.tar.gz
                    ├── oem.img
                    ├── package-file
                    ├── parameter.txt
                    ├── recovery.img
                    ├── rootfs.img
                    └── uboot.img
            ```

            ### update镜像构建输出(update.img.squashfs/update.img.rar)

            解压后输出update.img镜像，请使用 RKDevTool.exe 固件更新

            ```
            RKDevTool/
            ├── bin
            │         ├── adb.exe
            │         ├── AdbWinApi.dll
            │         ├── AdbWinUsbApi.dll
            │         ├── AFPTool.exe
            │         └── RKImageMaker.exe
            ├── config.cfg
            ├── config.ini
            ├── Language
            │         ├── Chinese.ini
            │         └── English.ini
            ├── RKDevTool.exe
            └── rockdev
                └── image
                    └── update.img
            ```

            ### 根文件镜像地址(rootfs.img.squashfs/rootfs.img.rar)

            仅包含发行版更文件系统(only rootfs.img with squashfs archive)

            ### 相关镜像信息(Image Information)

            - MiniLoaderAll.bin
            - misc.img
            - oem.img
            - package-file
            - parameter.txt
            - recovery.img
            - rootfs.img
            - uboot.img
            - modules.tar.gz
